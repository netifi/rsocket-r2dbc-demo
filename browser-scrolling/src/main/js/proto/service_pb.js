/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.io.rsocket.r2dbc.demo.RankingRequest', null, global);
goog.exportSymbol('proto.io.rsocket.r2dbc.demo.Record', null, global);
goog.exportSymbol('proto.io.rsocket.r2dbc.demo.RecordsRequest', null, global);
goog.exportSymbol('proto.io.rsocket.r2dbc.demo.RoundResult', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.rsocket.r2dbc.demo.RecordsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.rsocket.r2dbc.demo.RecordsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.rsocket.r2dbc.demo.RecordsRequest.displayName = 'proto.io.rsocket.r2dbc.demo.RecordsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.rsocket.r2dbc.demo.RecordsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.rsocket.r2dbc.demo.RecordsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.rsocket.r2dbc.demo.RecordsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rsocket.r2dbc.demo.RecordsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxresults: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.rsocket.r2dbc.demo.RecordsRequest}
 */
proto.io.rsocket.r2dbc.demo.RecordsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.rsocket.r2dbc.demo.RecordsRequest;
  return proto.io.rsocket.r2dbc.demo.RecordsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.rsocket.r2dbc.demo.RecordsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.rsocket.r2dbc.demo.RecordsRequest}
 */
proto.io.rsocket.r2dbc.demo.RecordsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxresults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.rsocket.r2dbc.demo.RecordsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.rsocket.r2dbc.demo.RecordsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.rsocket.r2dbc.demo.RecordsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rsocket.r2dbc.demo.RecordsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMaxresults();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 offset = 1;
 * @return {number}
 */
proto.io.rsocket.r2dbc.demo.RecordsRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.rsocket.r2dbc.demo.RecordsRequest.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 maxResults = 2;
 * @return {number}
 */
proto.io.rsocket.r2dbc.demo.RecordsRequest.prototype.getMaxresults = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.io.rsocket.r2dbc.demo.RecordsRequest.prototype.setMaxresults = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.rsocket.r2dbc.demo.RoundResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.rsocket.r2dbc.demo.RoundResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.rsocket.r2dbc.demo.RoundResult.displayName = 'proto.io.rsocket.r2dbc.demo.RoundResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.rsocket.r2dbc.demo.RoundResult.prototype.toObject = function(opt_includeInstance) {
  return proto.io.rsocket.r2dbc.demo.RoundResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.rsocket.r2dbc.demo.RoundResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rsocket.r2dbc.demo.RoundResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    round: jspb.Message.getFieldWithDefault(msg, 1, 0),
    winner: (f = msg.getWinner()) && proto.io.rsocket.r2dbc.demo.Record.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.rsocket.r2dbc.demo.RoundResult}
 */
proto.io.rsocket.r2dbc.demo.RoundResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.rsocket.r2dbc.demo.RoundResult;
  return proto.io.rsocket.r2dbc.demo.RoundResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.rsocket.r2dbc.demo.RoundResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.rsocket.r2dbc.demo.RoundResult}
 */
proto.io.rsocket.r2dbc.demo.RoundResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 2:
      var value = new proto.io.rsocket.r2dbc.demo.Record;
      reader.readMessage(value,proto.io.rsocket.r2dbc.demo.Record.deserializeBinaryFromReader);
      msg.setWinner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.rsocket.r2dbc.demo.RoundResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.rsocket.r2dbc.demo.RoundResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.rsocket.r2dbc.demo.RoundResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rsocket.r2dbc.demo.RoundResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getWinner();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.rsocket.r2dbc.demo.Record.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 round = 1;
 * @return {number}
 */
proto.io.rsocket.r2dbc.demo.RoundResult.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.rsocket.r2dbc.demo.RoundResult.prototype.setRound = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Record winner = 2;
 * @return {?proto.io.rsocket.r2dbc.demo.Record}
 */
proto.io.rsocket.r2dbc.demo.RoundResult.prototype.getWinner = function() {
  return /** @type{?proto.io.rsocket.r2dbc.demo.Record} */ (
    jspb.Message.getWrapperField(this, proto.io.rsocket.r2dbc.demo.Record, 2));
};


/** @param {?proto.io.rsocket.r2dbc.demo.Record|undefined} value */
proto.io.rsocket.r2dbc.demo.RoundResult.prototype.setWinner = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.io.rsocket.r2dbc.demo.RoundResult.prototype.clearWinner = function() {
  this.setWinner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.io.rsocket.r2dbc.demo.RoundResult.prototype.hasWinner = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.rsocket.r2dbc.demo.RankingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.rsocket.r2dbc.demo.RankingRequest.repeatedFields_, null);
};
goog.inherits(proto.io.rsocket.r2dbc.demo.RankingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.rsocket.r2dbc.demo.RankingRequest.displayName = 'proto.io.rsocket.r2dbc.demo.RankingRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.rsocket.r2dbc.demo.RankingRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.rsocket.r2dbc.demo.RankingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.rsocket.r2dbc.demo.RankingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.rsocket.r2dbc.demo.RankingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rsocket.r2dbc.demo.RankingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    proto.io.rsocket.r2dbc.demo.Record.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.rsocket.r2dbc.demo.RankingRequest}
 */
proto.io.rsocket.r2dbc.demo.RankingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.rsocket.r2dbc.demo.RankingRequest;
  return proto.io.rsocket.r2dbc.demo.RankingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.rsocket.r2dbc.demo.RankingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.rsocket.r2dbc.demo.RankingRequest}
 */
proto.io.rsocket.r2dbc.demo.RankingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.rsocket.r2dbc.demo.Record;
      reader.readMessage(value,proto.io.rsocket.r2dbc.demo.Record.deserializeBinaryFromReader);
      msg.addRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.rsocket.r2dbc.demo.RankingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.rsocket.r2dbc.demo.RankingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.rsocket.r2dbc.demo.RankingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rsocket.r2dbc.demo.RankingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.io.rsocket.r2dbc.demo.Record.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Record records = 1;
 * @return {!Array<!proto.io.rsocket.r2dbc.demo.Record>}
 */
proto.io.rsocket.r2dbc.demo.RankingRequest.prototype.getRecordsList = function() {
  return /** @type{!Array<!proto.io.rsocket.r2dbc.demo.Record>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.rsocket.r2dbc.demo.Record, 1));
};


/** @param {!Array<!proto.io.rsocket.r2dbc.demo.Record>} value */
proto.io.rsocket.r2dbc.demo.RankingRequest.prototype.setRecordsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.io.rsocket.r2dbc.demo.Record=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.rsocket.r2dbc.demo.Record}
 */
proto.io.rsocket.r2dbc.demo.RankingRequest.prototype.addRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.io.rsocket.r2dbc.demo.Record, opt_index);
};


proto.io.rsocket.r2dbc.demo.RankingRequest.prototype.clearRecordsList = function() {
  this.setRecordsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.rsocket.r2dbc.demo.Record = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.rsocket.r2dbc.demo.Record.repeatedFields_, null);
};
goog.inherits(proto.io.rsocket.r2dbc.demo.Record, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.rsocket.r2dbc.demo.Record.displayName = 'proto.io.rsocket.r2dbc.demo.Record';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.rsocket.r2dbc.demo.Record.repeatedFields_ = [2,3,8,9,15,16,18];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.toObject = function(opt_includeInstance) {
  return proto.io.rsocket.r2dbc.demo.Record.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.rsocket.r2dbc.demo.Record} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rsocket.r2dbc.demo.Record.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    aliasesList: jspb.Message.getRepeatedField(msg, 2),
    authorsList: jspb.Message.getRepeatedField(msg, 3),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    background: jspb.Message.getFieldWithDefault(msg, 6, ""),
    thumbnail: jspb.Message.getFieldWithDefault(msg, 7, ""),
    partnersList: jspb.Message.getRepeatedField(msg, 8),
    powersList: jspb.Message.getRepeatedField(msg, 9),
    comiccount: jspb.Message.getFieldWithDefault(msg, 10, 0),
    eventcount: jspb.Message.getFieldWithDefault(msg, 11, 0),
    pageviewcount: jspb.Message.getFieldWithDefault(msg, 12, 0),
    seriecount: jspb.Message.getFieldWithDefault(msg, 13, 0),
    storycount: jspb.Message.getFieldWithDefault(msg, 14, 0),
    secretidentitiesList: jspb.Message.getRepeatedField(msg, 15),
    speciesList: jspb.Message.getRepeatedField(msg, 16),
    supername: jspb.Message.getFieldWithDefault(msg, 17, ""),
    teamsList: jspb.Message.getRepeatedField(msg, 18),
    marvelurl: jspb.Message.getFieldWithDefault(msg, 19, ""),
    wikipediaurl: jspb.Message.getFieldWithDefault(msg, 20, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.rsocket.r2dbc.demo.Record}
 */
proto.io.rsocket.r2dbc.demo.Record.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.rsocket.r2dbc.demo.Record;
  return proto.io.rsocket.r2dbc.demo.Record.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.rsocket.r2dbc.demo.Record} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.rsocket.r2dbc.demo.Record}
 */
proto.io.rsocket.r2dbc.demo.Record.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addAliases(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAuthors(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setBackground(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setThumbnail(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addPartners(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addPowers(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setComiccount(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventcount(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageviewcount(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeriecount(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStorycount(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.addSecretidentities(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.addSpecies(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setSupername(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.addTeams(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarvelurl(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setWikipediaurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.rsocket.r2dbc.demo.Record.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.rsocket.r2dbc.demo.Record} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rsocket.r2dbc.demo.Record.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAliasesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getAuthorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getBackground();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getThumbnail();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPartnersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getPowersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getComiccount();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getEventcount();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getPageviewcount();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getSeriecount();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getStorycount();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getSecretidentitiesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      15,
      f
    );
  }
  f = message.getSpeciesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      16,
      f
    );
  }
  f = message.getSupername();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getTeamsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      18,
      f
    );
  }
  f = message.getMarvelurl();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getWikipediaurl();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.rsocket.r2dbc.demo.Record.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string aliases = 2;
 * @return {!Array<string>}
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.getAliasesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.io.rsocket.r2dbc.demo.Record.prototype.setAliasesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.addAliases = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.io.rsocket.r2dbc.demo.Record.prototype.clearAliasesList = function() {
  this.setAliasesList([]);
};


/**
 * repeated string authors = 3;
 * @return {!Array<string>}
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.getAuthorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.io.rsocket.r2dbc.demo.Record.prototype.setAuthorsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.addAuthors = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.io.rsocket.r2dbc.demo.Record.prototype.clearAuthorsList = function() {
  this.setAuthorsList([]);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.io.rsocket.r2dbc.demo.Record.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.io.rsocket.r2dbc.demo.Record.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string background = 6;
 * @return {string}
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.getBackground = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.io.rsocket.r2dbc.demo.Record.prototype.setBackground = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string thumbnail = 7;
 * @return {string}
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.getThumbnail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.io.rsocket.r2dbc.demo.Record.prototype.setThumbnail = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated string partners = 8;
 * @return {!Array<string>}
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.getPartnersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array<string>} value */
proto.io.rsocket.r2dbc.demo.Record.prototype.setPartnersList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.addPartners = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.io.rsocket.r2dbc.demo.Record.prototype.clearPartnersList = function() {
  this.setPartnersList([]);
};


/**
 * repeated string powers = 9;
 * @return {!Array<string>}
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.getPowersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/** @param {!Array<string>} value */
proto.io.rsocket.r2dbc.demo.Record.prototype.setPowersList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.addPowers = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.io.rsocket.r2dbc.demo.Record.prototype.clearPowersList = function() {
  this.setPowersList([]);
};


/**
 * optional int32 comicCount = 10;
 * @return {number}
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.getComiccount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.io.rsocket.r2dbc.demo.Record.prototype.setComiccount = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 eventCount = 11;
 * @return {number}
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.getEventcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.io.rsocket.r2dbc.demo.Record.prototype.setEventcount = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 pageviewCount = 12;
 * @return {number}
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.getPageviewcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.io.rsocket.r2dbc.demo.Record.prototype.setPageviewcount = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 serieCount = 13;
 * @return {number}
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.getSeriecount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.io.rsocket.r2dbc.demo.Record.prototype.setSeriecount = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 storyCount = 14;
 * @return {number}
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.getStorycount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.io.rsocket.r2dbc.demo.Record.prototype.setStorycount = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * repeated string secretIdentities = 15;
 * @return {!Array<string>}
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.getSecretidentitiesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 15));
};


/** @param {!Array<string>} value */
proto.io.rsocket.r2dbc.demo.Record.prototype.setSecretidentitiesList = function(value) {
  jspb.Message.setField(this, 15, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.addSecretidentities = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};


proto.io.rsocket.r2dbc.demo.Record.prototype.clearSecretidentitiesList = function() {
  this.setSecretidentitiesList([]);
};


/**
 * repeated string species = 16;
 * @return {!Array<string>}
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.getSpeciesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 16));
};


/** @param {!Array<string>} value */
proto.io.rsocket.r2dbc.demo.Record.prototype.setSpeciesList = function(value) {
  jspb.Message.setField(this, 16, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.addSpecies = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};


proto.io.rsocket.r2dbc.demo.Record.prototype.clearSpeciesList = function() {
  this.setSpeciesList([]);
};


/**
 * optional string superName = 17;
 * @return {string}
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.getSupername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.io.rsocket.r2dbc.demo.Record.prototype.setSupername = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * repeated string teams = 18;
 * @return {!Array<string>}
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.getTeamsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 18));
};


/** @param {!Array<string>} value */
proto.io.rsocket.r2dbc.demo.Record.prototype.setTeamsList = function(value) {
  jspb.Message.setField(this, 18, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.addTeams = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 18, value, opt_index);
};


proto.io.rsocket.r2dbc.demo.Record.prototype.clearTeamsList = function() {
  this.setTeamsList([]);
};


/**
 * optional string marvelUrl = 19;
 * @return {string}
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.getMarvelurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto.io.rsocket.r2dbc.demo.Record.prototype.setMarvelurl = function(value) {
  jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional string wikipediaUrl = 20;
 * @return {string}
 */
proto.io.rsocket.r2dbc.demo.Record.prototype.getWikipediaurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.io.rsocket.r2dbc.demo.Record.prototype.setWikipediaurl = function(value) {
  jspb.Message.setProto3StringField(this, 20, value);
};


goog.object.extend(exports, proto.io.rsocket.r2dbc.demo);
